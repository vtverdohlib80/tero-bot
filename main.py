import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
import logging
from flask import Flask, request

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
TOKEN = "7560668855:AAHwS3FGu0aSCn6fP8JBtcfYNgC96W77k7Q"
WEBHOOK_URL = "https://tero-bot-33.onrender.com"

# –°—Ç–∞–¥—ñ—ó –¥—ñ–∞–ª–æ–≥—É
(
    WAIT_QUESTION,
    WAIT_EMOTION,
    WAIT_BIRTHDATE,
    WAIT_PERSONAL,
    WAIT_DECK,
    WAIT_TAROLOG,
    CONFIRMATION,
) = range(7)

DECKS = ["–ö–ª–∞—Å–∏—á–Ω–∞ üÉè", "–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ üîÆ", "–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ üåü"]
TAROLOGS = [
    "–¢–∞—Ä–æ–ª–æ–≥ 1 üßô‚Äç‚ôÇÔ∏è",
    "–¢–∞—Ä–æ–ª–æ–≥ 2 üßô‚Äç‚ôÄÔ∏è",
    "–¢–∞—Ä–æ–ª–æ–≥ 3 üßô",
    "–¢–∞—Ä–æ–ª–æ–≥ 4 üßô‚Äç‚ôÇÔ∏è",
    "–¢–∞—Ä–æ–ª–æ–≥ 5 üßô‚Äç‚ôÄÔ∏è",
    "–¢–∞—Ä–æ–ª–æ–≥ 6 üßô",
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = (
        f"üëã –í—ñ—Ç–∞—é, {user.first_name}! –Ø —Ç–≤—ñ–π –¢–∞—Ä–æ-–±–æ—Ç.\n\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥ —Ç–∞—Ä–æ–ª–æ–≥–∞."
    )
    keyboard = [
        [InlineKeyboardButton("üÉè –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥ —Ç–∞—Ä–æ–ª–æ–≥–∞", callback_data="start_reading")]
    ]
    await update.message.reply_text(welcome_text, reply_markup=InlineKeyboardMarkup(keyboard))


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "start_reading":
        await query.message.reply_text("‚ùì –í–≤–µ–¥–∏ —á—ñ—Ç–∫–µ –∞–±–æ –ø—Ä–∏–±–ª–∏–∑–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è —á–∏ —Ç–µ–º—É:")
        return WAIT_QUESTION

    if data.startswith("deck_"):
        deck_choice = int(data.split("_")[1])
        context.user_data["deck"] = DECKS[deck_choice]
        keyboard = [[InlineKeyboardButton(t, callback_data=f"tarolog_{i}")] for i, t in enumerate(TAROLOGS)]
        await query.message.reply_text("üé¥ –û–±–µ—Ä–∏ —Ç–∞—Ä–æ–ª–æ–≥–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
        return WAIT_TAROLOG

    if data.startswith("tarolog_"):
        tarolog_choice = int(data.split("_")[1])
        context.user_data["tarolog"] = TAROLOGS[tarolog_choice]

        summary = (
            f"üìù –¢–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥:\n"
            f"–ü–∏—Ç–∞–Ω–Ω—è: {context.user_data.get('question')}\n"
            f"–ï–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω: {context.user_data.get('emotion')}\n"
            f"–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {context.user_data.get('birthdate')}\n"
            f"–Ü–Ω—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {context.user_data.get('personal')}\n"
            f"–ö–æ–ª–æ–¥–∞: {context.user_data.get('deck')}\n"
            f"–¢–∞—Ä–æ–ª–æ–≥: {context.user_data.get('tarolog')}\n\n"
            "‚úÖ –Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞–ø–∏—à–∏ '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é', –∞–±–æ '–°–∫–∞—Å—É–≤–∞—Ç–∏'."
        )
        await query.message.reply_text(summary)
        return CONFIRMATION


async def question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question"] = update.message.text.strip()
    await update.message.reply_text("üòä –û–ø–∏—à–∏ —Å–≤—ñ–π –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω:")
    return WAIT_EMOTION


async def emotion_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["emotion"] = update.message.text.strip()
    await update.message.reply_text("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–î–î.–ú–ú.–†–†–†–†):")
    return WAIT_BIRTHDATE


async def birthdate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import re
    text = update.message.text.strip()
    if not re.match(r"\d{2}\.\d{2}\.\d{4}", text):
        await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –º–∞—î –±—É—Ç–∏ –î–î.–ú–ú.–†–†–†–†. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, 25.05.1990")
        return WAIT_BIRTHDATE
    context.user_data["birthdate"] = text
    await update.message.reply_text("‚ÑπÔ∏è –í–≤–µ–¥–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (–∞–±–æ '–Ω–µ–º–∞'):")
    return WAIT_PERSONAL


async def personal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["personal"] = update.message.text.strip()
    keyboard = [[InlineKeyboardButton(deck, callback_data=f"deck_{i}")] for i, deck in enumerate(DECKS)]
    await update.message.reply_text("üÉè –û–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))
    return WAIT_DECK


async def confirmation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    if text == "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é":
        await update.message.reply_text("üîÆ –†–æ–∑–∫–ª–∞–¥ –≥–æ—Ç—É—î—Ç—å—Å—è...\n(–¢—É—Ç –∑ º—è–≤–∏—Ç—å—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å)")
        context.user_data.clear()
        return ConversationHandler.END
    elif text == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        await update.message.reply_text("‚ùå –†–æ–∑–∫–ª–∞–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        context.user_data.clear()
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é' –∞–±–æ '–°–∫–∞—Å—É–≤–∞—Ç–∏'.")
        return CONFIRMATION


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END


def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CallbackQueryHandler(button_handler, pattern="^start_reading$"),
        ],
        states={
            WAIT_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_handler)],
            WAIT_EMOTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, emotion_handler)],
            WAIT_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, birthdate_handler)],
            WAIT_PERSONAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, personal_handler)],
            WAIT_DECK: [CallbackQueryHandler(button_handler, pattern="^deck_")],
            WAIT_TAROLOG: [CallbackQueryHandler(button_handler, pattern="^tarolog_")],
            CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirmation_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
        per_message=True,
    )

    app.add_handler(conv_handler)

    # Webhook –∑–∞–ø—É—Å–∫
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        webhook_url=f"{WEBHOOK_URL}/webhook"
    )


if __name__ == "__main__":
    main()
