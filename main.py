from flask import Flask, request
import os
import requests
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CHATGPT_ENDPOINT = "https://api.openai.com/v1/chat/completions"
TELEGRAM_API = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

# –ó–±–µ—Ä–µ–∂–µ–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ ‚Äî —É –ø–∞–º'—è—Ç—ñ, –Ω–∞ –ø—Ä–æ–¥—ñ —Ç—Ä–µ–±–∞ –±–∞–∑—É)
user_states = {}

@app.route('/')
def index():
    return "Tarot Bot is running!"

@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
def telegram_webhook():
    data = request.get_json()
    if 'message' in data:
        chat_id = data['message']['chat']['id']
        text = data['message'].get('text', '')

        if text == '/start':
            send_welcome(chat_id)
            user_states[chat_id] = None  # –û—á—ñ–∫—É—î–º–æ –≤–∏–±—ñ—Ä —Ç–µ–º–∏
        else:
            state = user_states.get(chat_id)
            if state == "awaiting_custom_query":
                # –û—Ç—Ä–∏–º–∞–ª–∏ —Ç–µ–∫—Å—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É
                prompt = create_prompt(text)
                gpt_response = ask_chatgpt(prompt)
                send_message(chat_id, gpt_response)
                user_states[chat_id] = None
                send_welcome(chat_id)  # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∑–Ω–æ–≤—É
            else:
                # –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (–∫–æ—Ö–∞–Ω–Ω—è, —Ñ—ñ–Ω–∞–Ω—Å–∏, –∫–∞—Ä'—î—Ä–∞, –ø–æ—Ä–∞–¥–∞)
                if text.lower() in ["–∫–æ—Ö–∞–Ω–Ω—è", "—Ñ—ñ–Ω–∞–Ω—Å–∏", "–∫–∞—Ä'—î—Ä–∞", "–ø–æ—Ä–∞–¥–∞ –Ω–∞ –¥–µ–Ω—å"]:
                    prompt = create_prompt(text)
                    gpt_response = ask_chatgpt(prompt)
                    send_message(chat_id, gpt_response)
                    send_welcome(chat_id)  # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∑–Ω–æ–≤—É
                elif text == "–í–≤–µ—Å—Ç–∏ —Å–≤—ñ–π –∑–∞–ø–∏—Ç":
                    send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç –¥–ª—è —Ä–æ–∑–∫–ª–∞–¥—É –¢–∞—Ä–æ:")
                    user_states[chat_id] = "awaiting_custom_query"
                else:
                    send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ.")
                    send_welcome(chat_id)
    return {"ok": True}

def send_welcome(chat_id):
    keyboard = {
        "keyboard": [
            ["–ö–æ—Ö–∞–Ω–Ω—è", "–§—ñ–Ω–∞–Ω—Å–∏"],
            ["–ö–∞—Ä'—î—Ä–∞", "–ü–æ—Ä–∞–¥–∞ –Ω–∞ –¥–µ–Ω—å"],
            ["–í–≤–µ—Å—Ç–∏ —Å–≤—ñ–π –∑–∞–ø–∏—Ç"]
        ],
        "one_time_keyboard": True,
        "resize_keyboard": True
    }
    send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É —Ä–æ–∑–∫–ª–∞–¥—É –¢–∞—Ä–æ:", keyboard)

def create_prompt(topic):
    return f"""
    –¢–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ç–∞—Ä–æ–ª–æ–≥. –ü—Ä–æ–≤–µ–¥–∏ —É—è–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –∫–∞—Ä—Ç –¢–∞—Ä–æ –Ω–∞ —Ç–µ–º—É: "{topic}". –í–∏–±–µ—Ä–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ 3 –∫–∞—Ä—Ç–∏ —ñ –ø–æ—è—Å–Ω–∏ —ó—Ö –∑–Ω–∞—á–µ–Ω–Ω—è. –ü–æ—Ç—ñ–º –∑—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–µ —Ç–ª—É–º–∞—á–µ–Ω–Ω—è —Å–∏—Ç—É–∞—Ü—ñ—ó.
    """

def ask_chatgpt(prompt):
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "gpt-3.5-turbo",
        "messages": [
            {"role": "system", "content": "–¢–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ç–∞—Ä–æ–ª–æ–≥."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.9
    }

    response = requests.post(CHATGPT_ENDPOINT, headers=headers, json=data)
    result = response.json()
     print("OpenAI response:", result)  # <-- –¥–æ–¥–∞–π —Ü–µ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   
        return result['choices'][0]['message']['content']
    except Exception:
        return "–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–∫—Ç—É–≤–∞–Ω–Ω—ñ –∫–∞—Ä—Ç üòî"

def send_message(chat_id, text, reply_markup=None):
    url = f"{TELEGRAM_API}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    if reply_markup:
        payload["reply_markup"] = reply_markup
    requests.post(url, json=payload)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
