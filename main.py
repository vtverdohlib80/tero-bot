import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# –°—Ç–∞–¥—ñ—ó —Ä–æ–∑–º–æ–≤–∏
(
    ASK_QUESTION,
    ASK_EMOTION,
    ASK_BIRTHDATE,
    ASK_DECK,
    ASK_TAROLOGIST,
    FINAL,
) = range(6)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ–ª–æ–¥–∏ —Ç–∞ —Ç–∞—Ä–æ–ª–æ–≥–∞
deck_buttons = [
    [InlineKeyboardButton("–ö–ª–∞—Å–∏—á–Ω–∞", callback_data='deck_classic')],
    [InlineKeyboardButton("–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞", callback_data='deck_universal')],
    [InlineKeyboardButton("–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞", callback_data='deck_special')],
]

tarologists_buttons = [
    [InlineKeyboardButton(f"–¢–∞—Ä–æ–ª–æ–≥ {i+1}", callback_data=f"tarologist_{i+1}")] for i in range(6)
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –±–æ—Ç –¢–∞—Ä–æ.\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üÉè –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥ —Ç–∞—Ä–æ–ª–æ–≥–∞", callback_data='start_reading')]
        ])
    )
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'start_reading':
        await query.message.reply_text("–ù–∞–ø–∏—à–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Ç–µ–º—É –¥–ª—è —Ä–æ–∑–∫–ª–∞–¥—É:")
        return ASK_QUESTION

    elif query.data.startswith('deck_'):
        context.user_data['deck'] = query.data.replace('deck_', '')
        await query.message.reply_text(f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫–æ–ª–æ–¥—É: {context.user_data['deck'].capitalize()}\n"
                                       "–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–æ–ª–æ–≥–∞:",
                                       reply_markup=InlineKeyboardMarkup(tarologists_buttons))
        return ASK_TAROLOGIST

    elif query.data.startswith('tarologist_'):
        context.user_data['tarologist'] = query.data.replace('tarologist_', '')
        # –¢—É—Ç –º–æ–∂–Ω–∞ –æ–±—Ä–æ–±–∏—Ç–∏ –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏
        await query.message.reply_text("–î—è–∫—É—é! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ. –°–∫–æ—Ä–æ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Ä–æ–∑–∫–ª–∞–¥.")
        # –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ª–æ–≥—ñ–∫—É —Ä–æ–∑–∫–ª–∞–¥—É —Ç–∞—Ä–æ –∑–∞ chat_id
        return ConversationHandler.END

    elif query.data == 'cancel':
        await query.message.reply_text("–†–æ–∑–º–æ–≤–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")
        return ConversationHandler.END

    return ConversationHandler.END

async def ask_emotion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['question'] = update.message.text
    await update.message.reply_text("–û–ø–∏—à–∏ —Å–≤—ñ–π –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω:")
    return ASK_EMOTION

async def ask_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['emotion'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–†–†–†–†):")
    return ASK_BIRTHDATE

async def ask_deck(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['birthdate'] = update.message.text
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –∫–æ–ª–æ–¥—É:",
        reply_markup=InlineKeyboardMarkup(deck_buttons)
    )
    return ASK_DECK

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–†–æ–∑–º–æ–≤–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.')
    return ConversationHandler.END


def main():
    import os

    TOKEN = "7560668855:AAHwS3FGu0aSCn6fP8JBtcfYNgC96W77k7Q"

    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern='^start_reading$')],
        states={
            ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_emotion)],
            ASK_EMOTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_birthdate)],
            ASK_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_deck)],
            ASK_DECK: [CallbackQueryHandler(button_handler, pattern='^deck_')],
            ASK_TAROLOGIST: [CallbackQueryHandler(button_handler, pattern='^tarologist_')],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=True,
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)

    print("Bot started with polling...")
    application.run_polling()


if __name__ == '__main__':
    main()
