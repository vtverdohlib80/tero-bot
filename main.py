import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –ï—Ç–∞–ø–∏ —Å—Ü–µ–Ω–∞—Ä—ñ—é
WAIT_QUESTION, WAIT_EMOTION, WAIT_BIRTHDATE, WAIT_PERSONAL, WAIT_DECK, WAIT_TAROLOG = range(6)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ü–æ—á–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ üÉè", callback_data="start_reading")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏, —â–æ–± –ø–æ—á–∞—Ç–∏:", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "start_reading":
        await query.edit_message_text("–Ø–∫–µ —É —Ç–µ–±–µ –ø–∏—Ç–∞–Ω–Ω—è?")
        return WAIT_QUESTION

    elif query.data.startswith("deck_"):
        await query.edit_message_text("–¢–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥ –≥–æ—Ç–æ–≤–∏–π ‚úÖ")
        return ConversationHandler.END

    elif query.data.startswith("tarolog_"):
        await query.edit_message_text("–î—è–∫—É—î–º–æ! –¢–∞—Ä–æ–ª–æ–≥ —Å–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è.")
        return ConversationHandler.END

# –ü–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question"] = update.message.text
    await update.message.reply_text("–Ø–∫—É –µ–º–æ—Ü—ñ—é —Ç–∏ –∑–∞—Ä–∞–∑ –≤—ñ–¥—á—É–≤–∞—î—à?")
    return WAIT_EMOTION

# –ï–º–æ—Ü—ñ—è
async def emotion_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["emotion"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–î–î.–ú–ú.–†–†–†–†):")
    return WAIT_BIRTHDATE

# –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
async def birthdate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birthdate"] = update.message.text
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ —â–æ—Å—å –ø—Ä–æ —Å–µ–±–µ (–∫–æ—Ä–æ—Ç–∫–æ):")
    return WAIT_PERSONAL

# –û—Å–æ–±–∏—Å—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
async def personal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["personal"] = update.message.text

    keyboard = [
        [InlineKeyboardButton("üîÆ –ö–æ–ª–æ–¥–∞ –¢–∞—Ä–æ 1", callback_data="deck_1")],
        [InlineKeyboardButton("üßø –ö–æ–ª–æ–¥–∞ –¢–∞—Ä–æ 2", callback_data="deck_2")],
    ]
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–æ–ª–æ–¥—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return WAIT_DECK

# –ö–æ–º–∞–Ω–¥–∞ cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://yourdomain.com/webhook

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAIT_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_handler)],
            WAIT_EMOTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, emotion_handler)],
            WAIT_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, birthdate_handler)],
            WAIT_PERSONAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, personal_handler)],
            WAIT_DECK: [CallbackQueryHandler(button_handler, pattern="^deck_")],
            WAIT_TAROLOG: [CallbackQueryHandler(button_handler, pattern="^tarolog_")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=False,
        allow_reentry=True,
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^start_reading$"))

    # –ó–∞–ø—É—Å–∫ —É —Ä–µ–∂–∏–º—ñ webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 10000)),
        url_path="/webhook",
        webhook_url=f"{WEBHOOK_URL}/webhook"
    )

if __name__ == "__main__":
    main()
