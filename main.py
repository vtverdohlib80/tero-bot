from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)

# –°—Ç–∞–¥—ñ—ó –¥—ñ–∞–ª–æ–≥—É
(
    WAIT_QUESTION,
    WAIT_EMOTION,
    WAIT_BIRTHDATE,
    WAIT_PERSONAL,
    WAIT_DECK,
    WAIT_TAROLOG,
    CONFIRMATION,
) = range(7)

# –î–∞–Ω—ñ –¥–ª—è –≤–∏–±–æ—Ä—É
DECKS = ["–ö–ª–∞—Å–∏—á–Ω–∞ üÉè", "–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ üîÆ", "–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ üåü"]
TAROLOGS = [
    "–¢–∞—Ä–æ–ª–æ–≥ 1 üßô‚Äç‚ôÇÔ∏è",
    "–¢–∞—Ä–æ–ª–æ–≥ 2 üßô‚Äç‚ôÄÔ∏è",
    "–¢–∞—Ä–æ–ª–æ–≥ 3 üßô",
    "–¢–∞—Ä–æ–ª–æ–≥ 4 üßô‚Äç‚ôÇÔ∏è",
    "–¢–∞—Ä–æ–ª–æ–≥ 5 üßô‚Äç‚ôÄÔ∏è",
    "–¢–∞—Ä–æ–ª–æ–≥ 6 üßô",
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = (
        f"üëã –í—ñ—Ç–∞—é, {user.first_name}! –Ø —Ç–≤—ñ–π –¢–∞—Ä–æ-–±–æ—Ç.\n\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥ —Ç–∞—Ä–æ–ª–æ–≥–∞."
    )
    keyboard = [
        [InlineKeyboardButton("üÉè –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥ —Ç–∞—Ä–æ–ª–æ–≥–∞", callback_data="start_reading")]
    ]
    await update.message.reply_text(welcome_text, reply_markup=InlineKeyboardMarkup(keyboard))


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "start_reading":
        await query.message.reply_text(
            "‚ùì –í–≤–µ–¥–∏ —á—ñ—Ç–∫–µ –∞–±–æ –ø—Ä–∏–±–ª–∏–∑–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è —á–∏ —Ç–µ–º—É, –Ω–∞ —è–∫—É —Ö–æ—á–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:"
        )
        return WAIT_QUESTION

    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–æ–ª–æ–¥–∏
    if data.startswith("deck_"):
        deck_choice = data.split("_")[1]
        context.user_data["deck"] = DECKS[int(deck_choice)]
        # –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ - –≤–∏–±—ñ—Ä —Ç–∞—Ä–æ–ª–æ–≥–∞
        keyboard = [
            [InlineKeyboardButton(t, callback_data=f"tarolog_{i}")]
            for i, t in enumerate(TAROLOGS)
        ]
        await query.message.reply_text(
            "üé¥ –û–±–µ—Ä–∏ —Ç–∞—Ä–æ–ª–æ–≥–∞:", reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return WAIT_TAROLOG

    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∞—Ä–æ–ª–æ–≥–∞
    if data.startswith("tarolog_"):
        tarolog_choice = data.split("_")[1]
        context.user_data["tarolog"] = TAROLOGS[int(tarolog_choice)]

        # –ü—ñ–¥—Å—É–º–æ–∫ —ñ –∑–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        question = context.user_data.get("question")
        emotion = context.user_data.get("emotion")
        birthdate = context.user_data.get("birthdate")
        personal = context.user_data.get("personal")
        deck = context.user_data.get("deck")
        tarolog = context.user_data.get("tarolog")

        summary = (
            f"üìù –¢–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥:\n"
            f"–ü–∏—Ç–∞–Ω–Ω—è: {question}\n"
            f"–ï–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω: {emotion}\n"
            f"–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {birthdate}\n"
            f"–Ü–Ω—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {personal}\n"
            f"–ö–æ–ª–æ–¥–∞: {deck}\n"
            f"–¢–∞—Ä–æ–ª–æ–≥: {tarolog}\n\n"
            "‚úÖ –Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞–ø–∏—à–∏ '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é', –∞–±–æ '–°–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
        )
        await query.message.reply_text(summary)
        return CONFIRMATION


async def question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Ç–µ–º—É.")
        return WAIT_QUESTION
    context.user_data["question"] = text
    await update.message.reply_text("üòä –û–ø–∏—à–∏ —Å–≤—ñ–π –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω:")
    return WAIT_EMOTION


async def emotion_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à–∏ —Å–≤—ñ–π –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω.")
        return WAIT_EMOTION
    context.user_data["emotion"] = text
    await update.message.reply_text("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–†–†–†–†):")
    return WAIT_BIRTHDATE


async def birthdate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    # –ü—Ä–æ—Å—Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞—Ç–∏
    import re

    if not re.match(r"\d{2}\.\d{2}\.\d{4}", text):
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.MM.–†–†–†–†, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 25.05.1990"
        )
        return WAIT_BIRTHDATE
    context.user_data["birthdate"] = text
    await update.message.reply_text(
        "‚ÑπÔ∏è –í–≤–µ–¥–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, —è–∫—â–æ —Ö–æ—á–µ—à (–∞–±–æ –Ω–∞–ø–∏—à–∏ '–Ω–µ–º–∞'):"
    )
    return WAIT_PERSONAL


async def personal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        text = "–Ω–µ–º–∞"
    context.user_data["personal"] = text

    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—ñ—Ä –∫–æ–ª–æ–¥–∏
    keyboard = [
        [InlineKeyboardButton(deck, callback_data=f"deck_{i}")]
        for i, deck in enumerate(DECKS)
    ]
    await update.message.reply_text(
        "üÉè –û–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç:", reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return WAIT_DECK


async def confirmation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    if text == "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é":
        # –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞—Ä–æ–ª–æ–≥–∞, –∞ –ø–æ–∫–∏ –∑–∞–≥–ª—É—à–∫–∞:
        await update.message.reply_text(
            "‚ú® –î—è–∫—É—é –∑–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è! –¢–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥ –≥–æ—Ç—É—î—Ç—å—Å—è...\n(—Ç—É—Ç –±—É–¥–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–∞—Ä–æ–ª–æ–≥–∞)"
        )
        # –û—á–∏—Å—Ç–∫–∞ userdata
        context.user_data.clear()
        return ConversationHandler.END
    elif text == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        await update.message.reply_text("‚ùå –†–æ–∑–∫–ª–∞–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ —Ö–æ—á–µ—à, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ /start")
        context.user_data.clear()
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é' –∞–±–æ '–°–∫–∞—Å—É–≤–∞—Ç–∏'.")
        return CONFIRMATION


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –Ø–∫—â–æ —Ö–æ—á–µ—à, –ø–æ—á–Ω–∏ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ—é /start")
    context.user_data.clear()
    return ConversationHandler.END


def main():
    TOKEN = "7560668855:AAHwS3FGu0aSCn6fP8JBtcfYNgC96W77k7Q"

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), CallbackQueryHandler(button_handler, pattern="^start_reading$")],
        states={
            WAIT_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_handler)],
            WAIT_EMOTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, emotion_handler)],
            WAIT_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, birthdate_handler)],
            WAIT_PERSONAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, personal_handler)],
            WAIT_DECK: [CallbackQueryHandler(button_handler, pattern="^deck_")],
            WAIT_TAROLOG: [CallbackQueryHandler(button_handler, pattern="^tarolog_")],
            CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirmation_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv_handler)
    print("Bot started...")
    app.run_polling()


if __name__ == "__main__":
    main()
