import os
import requests
from flask import Flask, request
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CHATGPT_ENDPOINT = "https://api.openai.com/v1/chat/completions"
TELEGRAM_API = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

@app.route('/')
def index():
    return "Tarot Bot is running!"

@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
def telegram_webhook():
    data = request.get_json()
    print("Incoming update:", data)

    if 'message' in data and 'text' in data['message']:
        chat_id = data['message']['chat']['id']
        text = data['message']['text']

        # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ —ñ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if text == '/start':
            send_welcome_buttons(chat_id)
        elif text in ['–ö–æ—Ö–∞–Ω–Ω—è', '–§—ñ–Ω–∞–Ω—Å–∏', "–ö–∞—Ä'—î—Ä–∞", '–ü–æ—Ä–∞–¥–∞ –Ω–∞ –¥–µ–Ω—å']:
            prompt = f"""–¢–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ç–∞—Ä–æ–ª–æ–≥. –ü—Ä–æ–≤–µ–¥–∏ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–µ–º—É "{text}". 
            –í–∏–±–µ—Ä–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ 3 –∫–∞—Ä—Ç–∏ —ñ –ø–æ—è—Å–Ω–∏ —ó—Ö –∑–Ω–∞—á–µ–Ω–Ω—è. –ü–æ—Ç—ñ–º –¥–∞–π –∫–æ—Ä–æ—Ç–∫–µ —Ç–ª—É–º–∞—á–µ–Ω–Ω—è."""
            gpt_response = ask_chatgpt(prompt)
            send_message(chat_id, gpt_response)
        elif text == '–í–≤–µ—Å—Ç–∏ —Å–≤—ñ–π –∑–∞–ø–∏—Ç':
            send_message(chat_id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –∑—Ä–æ–±–ª—é —Ä–æ–∑–∫–ª–∞–¥ –∫–∞—Ä—Ç –¢–∞—Ä–æ.")
        else:
            # –¢—É—Ç –≤–≤–∞–∂–∞—î–º–æ, —â–æ —Ü–µ –≤–ª–∞—Å–Ω–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            prompt = f"""–¢–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ç–∞—Ä–æ–ª–æ–≥. –ü—Ä–æ–≤–µ–¥–∏ —É—è–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –∫–∞—Ä—Ç –¢–∞—Ä–æ –Ω–∞ —Ç–µ–º—É:
            "{text}". –í–∏–±–µ—Ä–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ 3 –∫–∞—Ä—Ç–∏ —ñ –ø–æ—è—Å–Ω–∏ —ó—Ö –∑–Ω–∞—á–µ–Ω–Ω—è. –ü–æ—Ç—ñ–º –∑—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–µ —Ç–ª—É–º–∞—á–µ–Ω–Ω—è —Å–∏—Ç—É–∞—Ü—ñ—ó."""
            gpt_response = ask_chatgpt(prompt)
            send_message(chat_id, gpt_response)

    return {"ok": True}

def send_welcome_buttons(chat_id):
    keyboard = {
        "keyboard": [
            [{"text": "–ö–æ—Ö–∞–Ω–Ω—è"}, {"text": "–§—ñ–Ω–∞–Ω—Å–∏"}],
            [{"text": "–ö–∞—Ä'—î—Ä–∞"}, {"text": "–ü–æ—Ä–∞–¥–∞ –Ω–∞ –¥–µ–Ω—å"}],
            [{"text": "–í–≤–µ—Å—Ç–∏ —Å–≤—ñ–π –∑–∞–ø–∏—Ç"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    url = f"{TELEGRAM_API}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": "–û–±–µ—Ä–∏ —Ç–µ–º—É —Ä–æ–∑–∫–ª–∞–¥—É –∞–±–æ –≤–≤–µ–¥–∏ —Å–≤—ñ–π –∑–∞–ø–∏—Ç:",
        "reply_markup": keyboard
    }
    requests.post(url, json=payload)

def ask_chatgpt(prompt):
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "gpt-3.5-turbo",
        "messages": [
            {"role": "system", "content": "–¢–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ç–∞—Ä–æ–ª–æ–≥."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.9
    }

    response = requests.post(CHATGPT_ENDPOINT, headers=headers, json=data)

    if response.status_code != 200:
        print(f"OpenAI API error: {response.status_code} - {response.text}")
        return "–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–∫—Ç—É–≤–∞–Ω–Ω—ñ –∫–∞—Ä—Ç üòî"

    try:
        result = response.json()
        print("OpenAI response:", result)
        return result['choices'][0]['message']['content']
    except Exception as e:
        print("Error parsing OpenAI response:", e)
        return "–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–∫—Ç—É–≤–∞–Ω–Ω—ñ –∫–∞—Ä—Ç üòî"

def send_message(chat_id, text):
    url = f"{TELEGRAM_API}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    requests.post(url, json=payload)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
