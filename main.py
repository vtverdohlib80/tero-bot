import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)

TOKEN = os.environ.get("BOT_TOKEN")

ASK_TOPIC, ASK_EMOTION, ASK_BIRTH, ASK_DECK, ASK_TAROLOGIST = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! üßô‚Äç‚ôÄÔ∏è –Ø –±–æ—Ç —Ç–∞—Ä–æ–ª–æ–≥–∞. –ù–∞—Ç–∏—Å–Ω–∏ 'üÉè –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥ —Ç–∞—Ä–æ–ª–æ–≥–∞'", 
        reply_markup=ReplyKeyboardMarkup([["üÉè –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥ —Ç–∞—Ä–æ–ª–æ–≥–∞"]], resize_keyboard=True))

async def ask_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø–∫–µ —É —Ç–µ–±–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Ç–µ–º–∞ –¥–ª—è —Ä–æ–∑–∫–ª–∞–¥—É?")
    return ASK_TOPIC

async def ask_emotion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['topic'] = update.message.text
    await update.message.reply_text("–Ø–∫–∏–π —É —Ç–µ–±–µ –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω?")
    return ASK_EMOTION

async def ask_birth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['emotion'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é")
    return ASK_BIRTH

async def ask_deck(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['birth'] = update.message.text
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–æ–ª–æ–¥—É:",
        reply_markup=ReplyKeyboardMarkup([["–ö–ª–∞—Å–∏—á–Ω–∞", "–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞", "–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞"]], resize_keyboard=True))
    return ASK_DECK

async def ask_tarologist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['deck'] = update.message.text
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–æ–ª–æ–≥–∞:",
        reply_markup=ReplyKeyboardMarkup([
            ["–¢–∞—Ä–æ–ª–æ–≥ 1", "–¢–∞—Ä–æ–ª–æ–≥ 2", "–¢–∞—Ä–æ–ª–æ–≥ 3"],
            ["–¢–∞—Ä–æ–ª–æ–≥ 4", "–¢–∞—Ä–æ–ª–æ–≥ 5", "–¢–∞—Ä–æ–ª–æ–≥ 6"]
        ], resize_keyboard=True))
    return ASK_TAROLOGIST

async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['tarologist'] = update.message.text
    user_id = update.effective_chat.id

    result = (
        f"üÉè –†–æ–∑–∫–ª–∞–¥:\n"
        f"–¢–µ–º–∞: {context.user_data['topic']}\n"
        f"–°—Ç–∞–Ω: {context.user_data['emotion']}\n"
        f"–ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {context.user_data['birth']}\n"
        f"–ö–æ–ª–æ–¥–∞: {context.user_data['deck']}\n"
        f"–¢–∞—Ä–æ–ª–æ–≥: {context.user_data['tarologist']}\n"
        f"Chat ID: {user_id}"
    )
    await update.message.reply_text(result)
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üÉè –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥ —Ç–∞—Ä–æ–ª–æ–≥–∞$"), ask_topic)],
        states={
            ASK_TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_emotion)],
            ASK_EMOTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_birth)],
            ASK_BIRTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_deck)],
            ASK_DECK: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_tarologist)],
            ASK_TAROLOGIST: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish)],
        },
        fallbacks=[],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == "__main__":
    main()
