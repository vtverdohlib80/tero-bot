import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from flask import Flask, request
import logging

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

TOKEN = "7560668855:AAHwS3FGu0aSCn6fP8JBtcfYNgC96W77k7Q"
WEBHOOK_URL = "https://tero-bot-33.onrender.com"

# Flask app
flask_app = Flask(__name__)

# –°—Ç–∞–¥—ñ—ó ConversationHandler
(
    CHOOSING,
    QUESTION,
    EMOTION,
    BIRTHDATE,
    CHOOSE_DECK,
    CHOOSE_TAROLOGIST,
    DONE,
) = range(7)

# –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è –¥–∞–Ω–∏—Ö —é–∑–µ—Ä—ñ–≤, –∫–ª—é—á ‚Äî chat_id
user_data_store = {}

# –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_data_store[chat_id] = {}

    welcome_text = (
        "üëã –í—ñ—Ç–∞—é! –Ø —Ç–≤—ñ–π –¢–∞—Ä–æ–ª–æ–≥-–±–æ—Ç üÉè\n\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥ —Ç–∞—Ä–æ–ª–æ–≥–∞."
    )
    keyboard = [
        [InlineKeyboardButton("üÉè –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥ —Ç–∞—Ä–æ–ª–æ–≥–∞", callback_data="start_reading")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥"
async def start_reading_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    user_data_store[chat_id] = {}

    await query.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Ç–µ–º—É —Ä–æ–∑–∫–ª–∞–¥—É:")
    return QUESTION

# –ü—Ä–∏–π–æ–º –ø–∏—Ç–∞–Ω–Ω—è/—Ç–µ–º–∏
async def question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text
    user_data_store[chat_id]["question"] = text

    await update.message.reply_text("–û–ø–∏—à–∏ —Å–≤—ñ–π –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: —Ä–∞–¥—ñ—Å–Ω–∏–π, —Å—É–º–Ω–∏–π, —Å—Ç—É—Ä–±–æ–≤–∞–Ω–∏–π):")
    return EMOTION

# –ü—Ä–∏–π–æ–º –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
async def emotion_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text
    user_data_store[chat_id]["emotion"] = text

    await update.message.reply_text("–í–∫–∞–∂–∏ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 25.05.1990):")
    return BIRTHDATE

# –ü—Ä–∏–π–æ–º –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
async def birthdate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text
    # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –¥–∞—Ç–∏, –ø–æ–∫–∏ –ø—Ä–æ—Å—Ç–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
    user_data_store[chat_id]["birthdate"] = text

    # –í–∏–±—ñ—Ä –∫–æ–ª–æ–¥–∏
    keyboard = [
        [
            InlineKeyboardButton("–ö–ª–∞—Å–∏—á–Ω–∞", callback_data="deck_classic"),
            InlineKeyboardButton("–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞", callback_data="deck_universal"),
            InlineKeyboardButton("–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞", callback_data="deck_special"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–æ–ª–æ–¥—É:", reply_markup=reply_markup)
    return CHOOSE_DECK

# –í–∏–±—ñ—Ä –∫–æ–ª–æ–¥–∏
async def choose_deck_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    user_data_store[chat_id]["deck"] = query.data.replace("deck_", "")

    # –í–∏–±—ñ—Ä —Ç–∞—Ä–æ–ª–æ–≥–∞
    keyboard = [
        [
            InlineKeyboardButton("–¢–∞—Ä–æ–ª–æ–≥ 1", callback_data="tarologist_1"),
            InlineKeyboardButton("–¢–∞—Ä–æ–ª–æ–≥ 2", callback_data="tarologist_2"),
        ],
        [
            InlineKeyboardButton("–¢–∞—Ä–æ–ª–æ–≥ 3", callback_data="tarologist_3"),
            InlineKeyboardButton("–¢–∞—Ä–æ–ª–æ–≥ 4", callback_data="tarologist_4"),
        ],
        [
            InlineKeyboardButton("–¢–∞—Ä–æ–ª–æ–≥ 5", callback_data="tarologist_5"),
            InlineKeyboardButton("–¢–∞—Ä–æ–ª–æ–≥ 6", callback_data="tarologist_6"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–æ–ª–æ–≥–∞:", reply_markup=reply_markup)
    return CHOOSE_TAROLOGIST

# –í–∏–±—ñ—Ä —Ç–∞—Ä–æ–ª–æ–≥–∞
async def choose_tarologist_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    user_data_store[chat_id]["tarologist"] = query.data.replace("tarologist_", "")

    # –¢–£–¢ –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ –æ–±—Ä–æ–±–∫—É –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—Ä–∏–π–æ–º –¥–∞–Ω–∏—Ö
    data = user_data_store[chat_id]
    response = (
        "–î—è–∫—É—é! –¢–≤—ñ–π –∑–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ:\n\n"
        f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è: {data.get('question')}\n"
        f"üòå –ï–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω: {data.get('emotion')}\n"
        f"üéÇ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {data.get('birthdate')}\n"
        f"üÉè –ö–æ–ª–æ–¥–∞: {data.get('deck')}\n"
        f"üîÆ –¢–∞—Ä–æ–ª–æ–≥: {data.get('tarologist')}\n\n"
        "–ù–µ–∑–∞–±–∞—Ä–æ–º —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥ —Ç–∞—Ä–æ–ª–æ–≥–∞."
    )
    await query.edit_message_text(response)
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –∞–±–æ API —Ç–∞—Ä–æ–ª–æ–≥–∞

    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_data_store.pop(chat_id, None)
    await update.message.reply_text("–†–æ–∑–∫–ª–∞–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ —Ö–æ—á–µ—à, –ø–æ—á–Ω–∏ —Å–ø–æ—á–∞—Ç–∫—É –∑ /start")
    return ConversationHandler.END

# Flask route –¥–ª—è Telegram webhook
@flask_app.route("/", methods=["POST"])
def webhook():
    from telegram import Update
    update = Update.de_json(request.get_json(force=True), app.bot)
    app.update_queue.put_nowait(update)
    return "OK", 200

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Application —Ç–∞ ConversationHandler
app = Application.builder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_reading_handler, pattern="^start_reading$")],
    states={
        QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_handler)],
        EMOTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, emotion_handler)],
        BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, birthdate_handler)],
        CHOOSE_DECK: [CallbackQueryHandler(choose_deck_handler, pattern="^deck_")],
        CHOOSE_TAROLOGIST: [CallbackQueryHandler(choose_tarologist_handler, pattern="^tarologist_")],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    per_message=False,
)

app.add_handler(CommandHandler("start", start))
app.add_handler(conv_handler)

def main():
    # –ó–∞–ø—É—Å–∫ webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        webhook_url=WEBHOOK_URL,
    )

if __name__ == "__main__":
    main()
