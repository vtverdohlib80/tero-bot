import os
import sqlite3
from flask import Flask, request
import requests

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_API = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏
conn = sqlite3.connect('tarot_requests.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER,
    username TEXT,
    query TEXT,
    status TEXT DEFAULT 'new',
    answer TEXT
)
''')
conn.commit()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def send_message(chat_id, text, reply_markup=None):
    url = f"{TELEGRAM_API}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    if reply_markup:
        payload["reply_markup"] = reply_markup
    requests.post(url, json=payload)

# –ú–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    keyboard = {
        "inline_keyboard": [
            [{"text": "‚ù§Ô∏è –ö–æ—Ö–∞–Ω–Ω—è", "callback_data": "love"}],
            [{"text": "üí∞ –§—ñ–Ω–∞–Ω—Å–∏", "callback_data": "finance"}],
            [{"text": "üíº –ö–∞—Ä'—î—Ä–∞", "callback_data": "career"}],
            [{"text": "üì© –í–≤–µ—Å—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –∑–∞–ø–∏—Ç", "callback_data": "custom_query"}],
        ]
    }
    return keyboard

@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
def webhook():
    data = request.get_json()
    if 'message' in data:
        message = data['message']
        chat_id = message['chat']['id']
        username = message['chat'].get('username', '')

        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ /start
        if 'text' in message:
            text = message['text']
            if text == '/start':
                send_message(chat_id, "–í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ —Ç–µ–º—É —Ç–∞—Ä–æ –∞–±–æ –≤–≤–µ–¥–∏ –≤–ª–∞—Å–Ω–∏–π –∑–∞–ø–∏—Ç:", reply_markup=main_menu())
                return {"ok": True}

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –∑–∞–ø–∏—Ç (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /answer)
            if text.startswith('/answer'):
                # –§–æ—Ä–º–∞—Ç: /answer <chat_id> <—Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ>
                parts = text.split(' ', 2)
                if len(parts) < 3:
                    send_message(chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n/answer <chat_id> <—Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ>")
                    return {"ok": True}

                target_chat_id = parts[1]
                answer_text = parts[2]

                # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                send_message(target_chat_id, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–∞—Ä–æ–ª–æ–≥–∞:\n{answer_text}")

                # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —É –±–∞–∑—ñ
                cursor.execute("UPDATE requests SET status = 'answered', answer = ? WHERE chat_id = ? AND status = 'new'", (answer_text, target_chat_id))
                conn.commit()

                send_message(chat_id, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_chat_id}.")
                return {"ok": True}

            # –Ø–∫—â–æ —Ü–µ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ –≤–ª–∞—Å–Ω–∏–π –∑–∞–ø–∏—Ç
            cursor.execute("INSERT INTO requests (chat_id, username, query) VALUES (?, ?, ?)", (chat_id, username, text))
            conn.commit()

            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–µ–±–µ) –ø—Ä–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç
            admin_chat_id = int(os.getenv("ADMIN_CHAT_ID"))  # –¢–≤—ñ–π Telegram chat_id, –¥–µ —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            send_message(admin_chat_id, f"–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ @{username} (chat_id: {chat_id}):\n{text}")

            send_message(chat_id, "–ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ! –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–∞—Ä–æ–ª–æ–≥–∞.")
            return {"ok": True}

    elif 'callback_query' in data:
        query = data['callback_query']
        chat_id = query['message']['chat']['id']
        username = query['from'].get('username', '')
        data_cb = query['data']

        if data_cb == 'custom_query':
            send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç —É –≤—ñ–ª—å–Ω—ñ–π —Ñ–æ—Ä–º—ñ.")
            return {"ok": True}
        else:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ –∫–Ω–æ–ø–∫–∏
            cursor.execute("INSERT INTO requests (chat_id, username, query) VALUES (?, ?, ?)", (chat_id, username, data_cb))
            conn.commit()

            admin_chat_id = int(os.getenv("ADMIN_CHAT_ID"))
            send_message(admin_chat_id, f"–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ @{username} (chat_id: {chat_id}):\n{data_cb}")

            send_message(chat_id, "–ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ! –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–∞—Ä–æ–ª–æ–≥–∞.")
            return {"ok": True}

    return {"ok": True}

@app.route('/')
def index():
    return "Tarot bot is running!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
