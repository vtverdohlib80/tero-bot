from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    CallbackQueryHandler, ConversationHandler, ContextTypes
)

BOT_TOKEN = "–≤—Å—Ç–∞–≤_—Ç—É—Ç_—Å–≤—ñ–π_—Ç–æ–∫–µ–Ω"

WAIT_QUESTION, WAIT_EMOTION, WAIT_BIRTHDATE, WAIT_PERSONAL, WAIT_DECK, WAIT_TAROLOG, CONFIRMATION = range(7)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ü–æ—á–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥", callback_data="start_reading")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —Ç–∞—Ä–æ. –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "start_reading":
        await query.message.reply_text("–ù–∞–ø–∏—à–∏ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫–µ —Ç–µ–±–µ —Ç—É—Ä–±—É—î:")
        return WAIT_QUESTION

    elif query.data.startswith("deck_"):
        await query.message.reply_text("–¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —Ç–∞—Ä–æ–ª–æ–≥–∞:")
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        return WAIT_TAROLOG

    elif query.data.startswith("tarolog_"):
        await query.message.reply_text("–î—è–∫—É—é! –û—Å—å —Ç–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥: üîÆ ...")
        return ConversationHandler.END

async def question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question"] = update.message.text
    await update.message.reply_text("–Ø–∫ —Ç–∏ —Å–µ–±–µ –ø–æ—á—É–≤–∞—î—à?")
    return WAIT_EMOTION

async def emotion_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["emotion"] = update.message.text
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:")
    return WAIT_BIRTHDATE

async def birthdate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birthdate"] = update.message.text
    await update.message.reply_text("–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
    return WAIT_PERSONAL

async def personal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    keyboard = [[InlineKeyboardButton("–¢–∞—Ä–æ –î–æ–ª—ñ", callback_data="deck_fate")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É:", reply_markup=reply_markup)
    return WAIT_DECK

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–æ–∑–∫–ª–∞–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

async def on_startup(app):
    webhook_url = "https://—Ç–≤–æ—î-–ø–æ—Å–∏–ª–∞–Ω–Ω—è-–Ω–∞-render.onrender.com/webhook"  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤–æ—î
    await app.bot.set_webhook(webhook_url)

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CallbackQueryHandler(button_handler, pattern="^start_reading$")
        ],
        states={
            WAIT_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_handler)],
            WAIT_EMOTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, emotion_handler)],
            WAIT_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, birthdate_handler)],
            WAIT_PERSONAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, personal_handler)],
            WAIT_DECK: [CallbackQueryHandler(button_handler, pattern="^deck_")],
            WAIT_TAROLOG: [CallbackQueryHandler(button_handler, pattern="^tarolog_")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv_handler)

    app.run_webhook(
        listen="0.0.0.0",
        port=10000,
        webhook_path="/webhook",
        on_startup=on_startup
    )

if __name__ == "__main__":
    main()
