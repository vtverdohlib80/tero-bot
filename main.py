from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

import logging

# ====== –í–°–¢–ê–í –°–Æ–î–ò –°–í–û–á –î–ê–ù–Ü ======
BOT_TOKEN = "123456789:ABCdefGhijkLMNOPqrstuVWXYZ1234567890"
WEBHOOK_URL = "https://yourdomain.com/webhook"  # –∞–±–æ ngrok URL
# =================================

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –°—Ç–∞–Ω
ASK_NAME = 1

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç–∏", callback_data="start_clicker")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ñ—Ç–∞—é! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è —Å—Ç–∞—Ä—Ç—É –≥—Ä–∏.", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "start_clicker":
        await query.message.reply_text("–ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—å! –í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:")
        return ASK_NAME

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.text
    await update.message.reply_text(f"–ü—Ä–∏–≤—ñ—Ç, {user_name}! üéÆ –¢–µ–ø–µ—Ä –Ω–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É, —â–æ–± –º–∞–π–Ω–∏—Ç–∏!")
    return ConversationHandler.END

# –ü–æ–º–∏–ª–∫–∞
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.error(msg="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞:", exc_info=context.error)

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        },
        fallbacks=[],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_error_handler(error_handler)

    app.run_webhook(
        listen="0.0.0.0",
        port=8443,
        url_path="webhook",
        webhook_url=f"{WEBHOOK_URL}/webhook"
    )

if __name__ == "__main__":
    main()
