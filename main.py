import os
import logging
import asyncio

from fastapi import FastAPI, Request
import uvicorn

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_NAME = os.getenv("APP_NAME")  # –±–µ–∑ https://, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: my-bot-123.onrender.com
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://{APP_NAME}{WEBHOOK_PATH}"
PORT = int(os.environ.get("PORT", 10000))

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Telegram Application ---
app = Application.builder().token(BOT_TOKEN).build()

# --- FastAPI App ---
fastapi_app = FastAPI()


# --- –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –û—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å", callback_data="bonus"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        ],
        [
            InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª–∏", callback_data="refs"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –±–æ—Ç —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏. –í–∏–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=reply_markup
    )


# --- –û–±—Ä–æ–±–Ω–∏–∫ Callback-–∫–Ω–æ–ø–æ–∫ ---
@app.callback_query_handler()
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "bonus":
        await query.edit_message_text("üéÅ –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ –±–æ–Ω—É—Å!")
    elif query.data == "stats":
        await query.edit_message_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    elif query.data == "refs":
        await query.edit_message_text("üë• –£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤.")
    else:
        await query.edit_message_text("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")


# --- Webhook endpoint ---
@fastapi_app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    await app.update_queue.put(data)
    return {"ok": True}


# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É ---
async def main():
    await app.initialize()
    await app.bot.set_webhook(WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
    await app.start()
    await app.updater.start_polling()
    await app.run_until_disconnected()


# --- –ó–∞–ø—É—Å–∫ FastAPI —Ç–∞ Telegram ---
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    uvicorn.run(fastapi_app, host="0.0.0.0", port=PORT)
